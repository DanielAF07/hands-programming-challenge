/*
  ğŸ‘‰ : moves the memory pointer to the next cell
  ğŸ‘ˆ : moves the memory pointer to the previous cell
  ğŸ‘† : increment the memory cell at the current position
  ğŸ‘‡ : decreases the memory cell at the current position.
  ğŸ¤œ : if the memory cell at the current position is 0, jump just after the corresponding ğŸ¤›
  ğŸ¤› : if the memory cell at the current position is not 0, jump just after the corresponding ğŸ¤œ
  ğŸ‘Š : Display the current character represented by the ASCII code defined by the current position.
*/

const MAX_CELL = 255
const MIN_CELL = 0

const clamp = (value) => {
  if (value > MAX_CELL) {
    return MIN_CELL
  } else if (value < MIN_CELL) {
    return MAX_CELL
  }
  return value
}

const translate = (string) => {
  const memory = [0]
  let pointer = 0
  let output = ''
  const actions = Array.from(string)
  let index = 0

  // Find Loops and indexes
  const loops = []
  const loopsData = {}
  actions.forEach((action, index) => {
    if (action === 'ğŸ¤œ') {
      loops.push(index)
    } else if (action === 'ğŸ¤›') {
      const openIndex = loops.pop()
      loopsData[parseInt(openIndex)] = index
    }
  })

  // Translate
  while (index < actions.length) {
    const action = actions[index]
    switch (action) {
      case 'ğŸ‘‰':
        pointer++
        memory[pointer] ??= 0
        break
      case 'ğŸ‘ˆ':
        pointer--
        memory[pointer] ??= 0
        break
      case 'ğŸ‘†':
        memory[pointer] = clamp(memory[pointer] + 1)
        break
      case 'ğŸ‘‡':
        memory[pointer] = clamp(memory[pointer] - 1)
        break
      case 'ğŸ¤œ':
        if (memory[pointer] === 0) {
          index = loopsData[index]
        }
        break
      case 'ğŸ¤›':
        if (memory[pointer] !== 0) {
          const desiredIndex = Object.values(loopsData).findIndex((value) => value === index)
          index = Object.keys(loopsData)[desiredIndex]
        }
        break
      case 'ğŸ‘Š':
        output += String.fromCharCode(memory[pointer])
        break
    }
    index++
    // console.log({ action, index, pointer, value: memory[pointer], output })
  }
  return output
}

console.log(translate('ğŸ‘‡ğŸ¤œğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘ˆğŸ¤›ğŸ‘‰ğŸ‘‡ğŸ‘ŠğŸ‘‡ğŸ¤œğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ˆğŸ¤›ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘Š'))
console.log(translate('ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ¤œğŸ‘‡ğŸ‘ˆğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘ŠğŸ‘‰ğŸ‘‰ğŸ‘†ğŸ‘‰ğŸ‘‡ğŸ¤œğŸ‘†ğŸ¤›ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ¤œğŸ‘‰ğŸ¤œğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ˆğŸ‘ˆğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘ˆğŸ¤›ğŸ‘‰ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘‰ğŸ‘‡ğŸ‘ŠğŸ‘ˆğŸ‘ˆğŸ‘†ğŸ¤œğŸ‘‰ğŸ¤œğŸ‘†ğŸ‘‰ğŸ‘†ğŸ¤›ğŸ‘‰ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘‰ğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘†ğŸ‘ŠğŸ‘‰ğŸ‘†ğŸ‘Š'))

module.exports = translate